[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reproducibility at Urban",
    "section": "",
    "text": "This website contains resources for embracing reproducible research at the Urban Institute. Click the links above to get started learning about reproducible research!"
  },
  {
    "objectID": "index.html#contact",
    "href": "index.html#contact",
    "title": "Reproducibility at Urban",
    "section": "Contact",
    "text": "Contact\nPlease don’t hesitate to contact Maddie Pickens, Erika Tyagi, or Aaron R. Williams with any thoughts or questions about reproducible research at the Urban Institute."
  },
  {
    "objectID": "urbngit/urbngit.html",
    "href": "urbngit/urbngit.html",
    "title": "Git and Github at Urban",
    "section": "",
    "text": "This guide is intended to help Urban Institute employees get started with Git and GitHub.\nWe know that learning these tools can be a challenge, but we’re here for you! Drop a message in the #github Slack channel if you run into issues, and we will be happy to help out."
  },
  {
    "objectID": "urbngit/urbngit.html#git-vs.-github",
    "href": "urbngit/urbngit.html#git-vs.-github",
    "title": "Git and Github at Urban",
    "section": "Git vs. GitHub",
    "text": "Git vs. GitHub\nGit is a free, open source distributed version-control system for tracking changes in code. Because Git is installed and maintained locally on your computer, it can be used without an internet connection. It’s like a turbo-charged version of Word’s track changes for code.\nGitHub is a cloud-based, online hosting service for version control using Git. It also contains useful tools for collaboration and project management. It’s like a turbo-charged version of Box for sharing Git repositories (i.e. folders tracked by Git).\nDon’t get bogged down in the details – just remember that Git is a local version control system, while GitHub is a hosting site for backup and collaboration. Together, they pack a powerful punch."
  },
  {
    "objectID": "urbngit/urbngit.html#who-uses-git-and-github",
    "href": "urbngit/urbngit.html#who-uses-git-and-github",
    "title": "Git and Github at Urban",
    "section": "Who uses Git and GitHub?",
    "text": "Who uses Git and GitHub?\nUrban has more than 200 GitHub users and 1,000 repositories. A few examples of teams that use Git and GitHub include:\n\nUrban–Greater DC, led by Peter Tatian (Metro), has its own GitHub organization and 46+ repositories for all of its collaborated projects. The group mostly uses SAS.\n\nMatthew Buettgens (HPC) and Michael Simpson (HPC) use Git and GitHub to coordinate and document work on the Health Insurance Policy Simulation Model (HIPSM) by the modeling team. The team mostly uses Stata.\nResearchers in EDP host Stata and R scripts used to clean the data that powers the Education Data Portal on GitHub. They also publish analyses from these data publicly on GitHub alongside biweekly essays.\nThe COMMS team develops and shares data visualizations with Git and GitHub. The team mostly uses JavaScript.\nThe Data Science team requires the use of Git and GitHub for projects. The team mostly uses R and Python."
  },
  {
    "objectID": "urbngit/urbngit.html#why-version-control",
    "href": "urbngit/urbngit.html#why-version-control",
    "title": "Git and Github at Urban",
    "section": "Why version control?",
    "text": "Why version control?\nVersion control is a system for managing and recording changes to files over time. Good version control can:\n\nLimit the chance of making a mistake\nMaximize the chance of catching a mistake when it happens\nCreate a permanent record of changes to code\nEasily undo mistakes by switching between iterations of code\nAllow multiple paths of development while protecting working versions of code\nEncourage communication between collaborators\nBe used for external communication"
  },
  {
    "objectID": "urbngit/urbngit.html#why-distributed-version-control",
    "href": "urbngit/urbngit.html#why-distributed-version-control",
    "title": "Git and Github at Urban",
    "section": "Why distributed version control?",
    "text": "Why distributed version control?\nGit is a distributed version control system. Why is this important?\nCentralized version control is a system where version control and all files are stored in one centralized place. Centralized version control, like Box, is good for sharing a Word document but terrible for collaborating on code because people can overwrite other people’s code!\nDistributed version control is a system where the version control system and all files are mirrored on every user’s computer. This allows for the simultaneous editing and running of code. It also allows for code development without sacrificing a working version of the code."
  },
  {
    "objectID": "urbngit/urbngit.html#using-the-command-line",
    "href": "urbngit/urbngit.html#using-the-command-line",
    "title": "Git and Github at Urban",
    "section": "Using the command line",
    "text": "Using the command line\nThis guide shows how to use Git from the command line, which may look scary but we promise will be useful to learn! There are other tools to interact with Git using a visual interface (like Github Desktop, or RStudio’s built in Git integration). These tools may be helpful, but we recommend starting by reading this guide and understanding how Git works. Under the hood, all those visual interfaces just use the command line.\nTo run Git commands from the command line on a Windows computer, right click within any directory (i.e. folder) on your computer, and select Git Bash Here. Alternatively, if you already use an IDE like RStudio or VS Code, you can use the terminal within these IDEs directly to run commands. You can also read more about the command line in this tutorial.\nThroughout this guide, code chunks that begin with $ indicate when you should run a command from the command line, although you should not include the $ symbol when submitting the command:\n::: {.cell}\n$ <run_this_command> \n:::\n<> are used to indicate blanks that need to be filled in. Don’t actually submit <>. Instead, replace them with the desired text."
  },
  {
    "objectID": "urbngit/urbngit.html#registration",
    "href": "urbngit/urbngit.html#registration",
    "title": "Git and Github at Urban",
    "section": "Registration",
    "text": "Registration\nThis only needs to happen once in your lifetime!\n\nGitHub account\n\nCreate a GitHub account. There is no need to associate your account with the Urban Institute or an Urban Institute email address. Many people want to use GitHub for personal projects too.\nAfter creating an account, fill out Urban’s GitHub intake form to join Urban’s primary GitHub organization, UI-Research. Note that Urban has another GitHub organization, UrbanInstitute, that is primarily used for public-facing repositories.\n\n\n\nAuthentication and tokens\nYou will need to create a personal access token (PAT) to replace your password and provide enhanced security. Since 2021, GitHub has required PATs to perform Git operations. To create a PAT:\n\nLog into your GitHub account. Navigate to the drop-down menu in the top right corner with your profile picture. Select Settings near the bottom of this drop-down.\nFrom your account settings, navigate to Developer Settings, at the bottom of the menu on the left.\nFrom the developer settings, navigate to Personal Access Tokens in the menu on the left.\nClick Generate new token. You may be prompted to re-enter your GitHub password.\nAdd a note to label the token. This is useful if you intend to generate multiple tokens for different uses. Then, set a time limit for the token – we recommend 90 days. Finally, select the scope of permissions you would like to give the token. The default is selecting all options. Then click Generate token.\nThe generated token will appear. Make sure to copy and safely store the token when it appears, as you will not be able to view it again. Note that if you lose your token, you can always generate a new one. Use this in place of your GitHub password when prompted by Git (or when using the GitHub API).\n\nThe first time you attempt to clone (copy to your computer) a repository that is private on GitHub, Git will prompt you for your credentials. Your username is just your GitHub username. Your password should be the PAT that you created."
  },
  {
    "objectID": "urbngit/urbngit.html#installation",
    "href": "urbngit/urbngit.html#installation",
    "title": "Git and Github at Urban",
    "section": "Installation",
    "text": "Installation\nThis only needs to happen once per computer!\n\nInstalling Git\n\nInstall Git for Windows (or follow the relevant steps if you’re not using a Windows computer).\nConfirm that the installation was successful by running the following from your command line:\n::: {.cell}\n$ git --version    \n:::\n\nThe version of Git that you installed (rather than an error) should show up.\n\n\nConfiguring Git and GitHub\n\nLink your local Git to GitHub by submitting the following with your GitHub username in quotes:\n::: {.cell}\n$ git config --global user.name \"<your_github_username>\"\n:::\nYou should also submit the email address linked to your GitHub account:\n::: {.cell}\n$ git config --global user.email \"<your_email_address>\"\n:::\nEnsure that your GitHub username and email address are associated with your computer:\n::: {.cell}\n$ git config --list\n:::\n\nThe output should include user.name=<your_github_username> and user.email=<your_email_address>."
  },
  {
    "objectID": "urbngit/urbngit.html#basic-workflow",
    "href": "urbngit/urbngit.html#basic-workflow",
    "title": "Git and Github at Urban",
    "section": "Basic workflow",
    "text": "Basic workflow\n\nThe big picture\nBefore diving into syntax, keep in mind the big picture:\n\nCreate a repository for a project.\nTell Git which files to track.\nTake a snapshot of tracked files and add a commit message.\nSend those snapshots to a shared folder so others can access them.\nRepeat, repeat, repeat.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreating a new repository\nThis only needs to happen once per repository!\nOPTION 1: If you do not already have a project folder and are starting from scratch:\n\nUnder UI-Research on GitHub, click the green button titled New Repository (top, right corner). Give the repository a name, and click Create Repository.\nOn GitHub, navigate to the repo that you just created and click the green button titled Code (top, right corner). Copy the HTTPS remote URL. It will look like https://github.com/UI-Research/<name_of_your_repo>.git.\nNavigate to the directory where you want to keep the repo on your computer. Using the URL that you copied in the last step, clone the repository:\n::: {.cell}\n$ git clone <remote_url_for_your_repo>\n:::\n\nOPTION 2: If you already have a project folder on your computer and want to turn that folder into a GitHub repository:\n\nUnder UI-Research on GitHub, click the green button titled New Repository (top, right corner). Give the repository the same name as your directory, and click Create Repository.\nOn GitHub, navigate to the repo that you just created and click the green button titled Code (top, right corner). Copy the HTTPS remote URL. It will look like https://github.com/UI-Research/<name_of_your_repo>.git.\nNavigate to the root of your project folder and initialize a local repository:\n::: {.cell}\n$ git init\n:::\nSync the URL for the remote repository that you copied in Step 2:\n::: {.cell}\n$ git remote add origin <remote_url_for_your_repo>\n:::\n\n\n\nCloning an existing repository\nThis only needs to happen once per repository per computer!\nIf you want to clone a repository that already exists on GitHub to your computer:\n\nOn GitHub, navigate to the repo, and click the green button titled Code (top, right corner). Copy the HTTPS remote URL. It will look like https://github.com/UI-Research/<name_of_your_repo>.git.\nNavigate to the directory where you want to keep the repo on your computer. Using the URL that you copied in the last step, clone the repository:\n::: {.cell}\n$ git clone <remote_url_for_your_repo>\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdding collaborators to a repository\nTo share the repository with others, navigate to the GitHub page for the repo. Then, click Settings (along the top) and Collaborators and Teams (along the left side panel). Click the relevant buttons to add people (individual users) or teams (groups of users).\nTeams are useful if you have a set of users who will all need access to multiple repositories. Creating a team saves you from having to add each user individually for each new repo. Urban has 50+ teams on GitHub for specific projects (e.g. Education Data Team for folks across TECH, COMMS, and EDP who work on the Education Data Portal) or teams or centers within Urban (e.g. Data Science or HFPC).\n\n\nBasic commands and workflow\nThe most common Git commands you will use include git add, git commit, and git push. These tell Git which files to track, when to take snapshots of those files, and when to send those snapshots to GitHub for others to see.\n\ngit add adds a file to Git’s staging area. It tells Git, “hey, look at this file.”\n::: {.cell}\n$ git add <file_name>\n:::\ngit commit commits changes made to added files to the repository. It says, “hey, take a snapshot of the files I’ve added.”\n::: {.cell}\n$ git commit -m \"<message>\" \n:::\ngit status prints out important information about your repo. Use it before and after most commands to understand how files have changed in your repo.\n::: {.cell}\n$ git status \n:::\ngit push pushes your local commits to the remote repository on GitHub. It says, “hey, push all my snapshots to a shared folder so that other people can see them.” The command below will push to the default main branch of your repo. Note that for repositories created before August 2021, the default branch was called master, instead of main.\n::: {.cell}\n$ git push origin main\n:::\n\nBefore running the git push command, your code and commits could only be accessed on your local computer."
  },
  {
    "objectID": "urbngit/urbngit.html#collaborative-workflow",
    "href": "urbngit/urbngit.html#collaborative-workflow",
    "title": "Git and Github at Urban",
    "section": "Collaborative workflow",
    "text": "Collaborative workflow\nThe main benefit of version control is making sure you and your collaborators are all using the latest and greatest version of your code. When working individually, this will just be your local version. When working with others, you should pull down the latest changes that anyone has pushed remotely before making further updates.\n\ngit pull copies the latest changes that anyone has pushed remotely to your local repository. It says, “hey, replace my local version with the current version on GitHub.” The command below will pull the latest version on the main branch.\n::: {.cell}\n$ git pull origin main\n:::\n\n\n\n\n\n\n\nBranches\nSo far in this guide, we’ve been working off a single main branch. By using multiple branches, you and your collaborators can update existing code or add new code without the fear of overwriting each others’ files. Branches let you say “hey, I’m going to leave the main version of the code alone while I try some things out over here.”\n\n\n\n\n\n\ngit checkout switches your local version to different branch. The -b flag in the command below tells Git to first create a new branch and then switch to it. When you first create a new branch, it will be identical to the local version of the branch that you switched from (typically the main branch).\n::: {.cell}\n$ git checkout -b <name_of_new_branch> \n:::\ngit branch will tell you what branch you are currently on. It’s always a good idea to run git branch before pushing.\n::: {.cell}\n$ git branch\n:::\ngit push sends your local commits to the remote repository, as noted earlier. To push to a specific branch, specify the branch name in the command. If you don’t explicitly specify a branch, Git will push to whichever branch you are on.\n::: {.cell}\n$ git push origin <name_of_new_branch> \n:::\n\n\n\n\n\n\n\n\n\n\n\n\nPull requests\nWhen you’re ready to share the updates on your branch with others, open a pull request. This says, “hey, I’d like to merge the work on my branch into the main (or some other) branch.” Pull requests makes it easy for others to see the changes you’ve made and provide feedback. They also help organize multiple related commits into a single update.\nThe most common way to open, review, and merge a pull request is through GitHub, rather than from the command line. Different teams develop their own standards for branching and pull requests, but here’s a common workflow:\n\nFrom your repo, click Pull requests (along the top) and then click the green New pull request button.\nSelect the branch with your work. By default, GitHub will create a pull request into the main branch.\nReview the files that have changed to ensure you don’t accidentally merge files you don’t intend to into the main branch.\nClick Create pull request. Write a summary of the updates included in the pull request and why you made those updates. You can also add Reviewers (along the right panel) to notify others that you would like them to look at your changes.\nTo make changes to the code included in a pull request if (e.g. if a reviewer requests updates), simply push to the same branch. The pull request will automatically be updated to reflect these changes.\nOnce approved, merge the pull request into the main branch by clicking the green Merge or Rebase and merge button.\nOnce your branch has been merged, delete it.\n\n\n\n\n\n\nAfter merging the pull request, you should return to the main branch and sync your local directory with the merged changes:\n\ngit checkout switches your local version to a different branch.\n::: {.cell}\n$ git checkout main\n:::\ngit pull copies the latest changes from the pull request that you just merged remotely to your local repository. If you don’t explicitly specify a branch when running the git pull command, Git will pull from the branch you are currently on.\n::: {.cell}\n$ git pull\n:::"
  },
  {
    "objectID": "urbngit/urbngit.html#summary-of-commands",
    "href": "urbngit/urbngit.html#summary-of-commands",
    "title": "Git and Github at Urban",
    "section": "Summary of commands",
    "text": "Summary of commands\nThe table below summarizes the commands that we’ve discussed in this guide. There are also tons of Git cheat sheets available online (e.g. from GitHub Education, from GitLab, or from Atlassian).\n\n\n\n\n\n\n\nCommand\nWhat you’re telling Git\n\n\n\n\ngit clone <remote_url_for_your_repo>\n“Hey, copy this remote project to my local computer”\n\n\ngit add <file_name>\n“Hey, look at this file”\n\n\ngit commit -m \"<message>\"\n“Hey, take a snapshot of the files I’ve added”\n\n\ngit status\n“Hey, tell me about what you’re looking at”\n\n\ngit push\n“Hey, send my snapshots to a shared folder so other people can see them”\n\n\ngit pull\n“Hey, replace my local version with the remote version of the shared folder”\n\n\ngit checkout -b <name_of_new_branch>\n“Hey, create a new branch and switch to it”\n\n\ngit checkout <name_of_existing_branch>\n“Hey, switch to a different branch”\n\n\ngit branch\n“Hey, tell me what branch I’m on”"
  },
  {
    "objectID": "urbngit/urbngit.html#parting-advice",
    "href": "urbngit/urbngit.html#parting-advice",
    "title": "Git and Github at Urban",
    "section": "Parting advice",
    "text": "Parting advice\nPhew, that was a lot! If you’re new to Git and GitHub, don’t get bogged down in the details. Start by adding, committing, and pushing files to GitHub on the main branch. Once you’re comfortable with those steps, find a colleague to work with you on the main branch and start pulling their updates. Before long, you’ll have that workflow down and will be ready to start using multiple branches and opening pull requests.\nThis guide is meant to be an introduction. Git and GitHub have hundreds of useful commands and features not discussed here. Different folks and teams also have different opinions on workflows and best practices for using these tools. Once you have a grasp of the basics, we encourage you to start exploring to find a workflow that works for you.\nYou will inevitably run into errors along the way, but learning how to resolve those will make you a better researcher, programmer, and problem solver. Don’t be afraid to ask for help – the #github Slack channel is a great place to start!\nLastly, remember that if things ever go horribly wrong, you can use the inelegant (but effective) “burn it all down” technique to return to a happy state: save your work elsewhere, delete the project folder, and clone a fresh copy of the repository.\n\n\n\n\n\nhttps://xkcd.com/1597"
  },
  {
    "objectID": "urbngit/urbngit.html#faqs",
    "href": "urbngit/urbngit.html#faqs",
    "title": "Git and Github at Urban",
    "section": "FAQs",
    "text": "FAQs\n\nGit and GitHub seem a little scary. How do I get started?\nStart by using these tools for solo work. It is the lowest stakes way to develop skills that will be valuable for collaboration.\nWhere can I go for help if I get stuck?\nRunning into errors is an inevitable part of working with Git and GitHub, but we’re here to help! Drop a message in the #github Slack channel when you have issues, or email Aaron Williams (awilliams@urban.org) or Erika Tyagi (etyagi@urban.org).\nCan I use Git and GitHub with projects that have confidential data stored on the Y Drive?\nYes! Read this guide for tips on how to do so.\nShould I use Git inside of Box? (i.e. turn a Box folder into a Git repository)\nNo – we strongly recommend keeping Box folders and GitHub repositories separate.\nWhat kinds of files should I track with Git?\nGenerally, you should only track code (i.e. scripts written in R, Stata, SAS, Python, etc.) with Git. You should not track large data files or binary files (i.e. Word, Excel files). There are occasions when tracking small data files with Git might make sense, but you should never store confidential data on GitHub (even in a private repository). We recommend getting familiar with .gitignore files, which can prevent you and your collaborators from accidentally pushing files to GitHub. GitHub provides hundreds of template .gitignore files for specific programming languages (e.g. R, Stata, or Python) or operating systems (e.g. Windows or MacOS) that can be useful as a starting point.\nHow do I add documentation to my repositories?\nUse README files to add context and documentation to your repos. These are Markdown files in the root of your directory named README.md that can help folks understand the structure and contents of your repo. Markdown Live Preview can be a useful tool to help with formatting.\nWhat permissions should I give my collaborators?\nIn general, you should follow the principle of least privilege, which means that you should give folks the minimum level of access they need, but no more than that. In most cases, this will be the Write role, but you should refer to GitHub’s guide describing the different roles and what they allow. If you need elevated permissions for a repository, post a message in the #github Slack channel.\nAre there other commands that can be helpful when using Git from the command line?\nDefinitely! Learning a few simple Bash commands can be helpful for navigating the command line. A few common commands include pwd (to print your current directory), cd (to change directories), and ls (to list the files in a directory). For an introduction to these, and other, commands, we recommend this guide from Friendly Django or this guide from Happy Git with R.\nWhere did the cute images in this guide come from?\nThose are GitHub’s mascot, the Octocat. You can read more about the history of Octocats here and check out the full set of Octocats that GitHub has created here."
  },
  {
    "objectID": "urbngit/urbngit.html#more-resources",
    "href": "urbngit/urbngit.html#more-resources",
    "title": "Git and Github at Urban",
    "section": "More resources",
    "text": "More resources\n\nGit Cheat Sheet\nHappy Git with R\nGit for Humans\nGetting Git Right\nGit Learning Lab\nDangit, Git"
  },
  {
    "objectID": "urbngit/confidential-data-and-git.html#set-up-the-y-drive-folder-for-data",
    "href": "urbngit/confidential-data-and-git.html#set-up-the-y-drive-folder-for-data",
    "title": "Reproducibility at Urban",
    "section": "1) Set up the Y Drive folder (for data)",
    "text": "1) Set up the Y Drive folder (for data)\n\nReach out to Hadi Jeddy in TECH to get a Y drive folder created for your project and give the appropriate project staff access.\nSecurely move the project data files into the assigned Y drive folder. Inside the Y Drive folder we recommend the following folder structure:\n- projectfolder/\n    - data/\n        - raw-data/\n        - intermediate-data/\n        - final-data/\n\nThe data you move in to the Y drive should go into the data/raw-data folder and manipulated data can go into the other folders.\nNote that because the data files aren’t in the Git repo, it will be possible for members of your team to accidentally overwrite the intermediate/final data files in the Y Drive if multiple people run the same script and there is no way to restore changes. For this reason, we suggest a) keeping the data files inside raw-data untouched and never programmatically write to that folder and b) keeping a clear script copy of how you transform the files inside raw-data so that if needed you can easily regenerate intermediate and final data files."
  },
  {
    "objectID": "urbngit/confidential-data-and-git.html#set-up-the-git-repo-for-scripts",
    "href": "urbngit/confidential-data-and-git.html#set-up-the-git-repo-for-scripts",
    "title": "Reproducibility at Urban",
    "section": "2) Set up the git repo (for scripts)",
    "text": "2) Set up the git repo (for scripts)\n\nUse Virtual Desktop to open either Win10 Secure or PGP. Note Win10 Secure has SAS installed while PGP does not. PGP might be more powerful/have more memory if you have computationally expensive code.\nIf you’re on PGP, install Github desktop from this link: https://desktop.github.com/. Win 10 Secure should already have this\nOpen up Github desktop and login to your Github account. If you don’t have one, you will need to signup here and them fill out this smartsheet form to be added to the Urban Institute organizations. Once someone adds you to the 2 Urban organizations, you will receive 2 emails asking if you want to join. You will have to click join in each of those emails to be succesfully added to our Github organizations.\nClick Add > Create new repository. In the popup screen, enter in an informative name for your repo, and project description. Use the example screenshot below for guidance.\nWe recommend initializing the repo with a README (with background information/instructions for running your code) and selecting a gitignore (to ignore certain R/Sas/Stata temporary files). Very importantly, when selecting a local path to create your repository, make sure that the repo is created within the local drive of the virtual machine you are on, and NOT the mapped Y: drive. By default, Github Desktop should try to create the repo in \\\\Ares\\CTX_RedirectedFolders$\\username\\My Documents\\GitHub. While that may look weird, that is an acceptable filepath and will put the repo in the My Documents\\Github folder of the virtual desktop. Also make sure to create the repostiory in the private UI-Research organization. The Urban Institute organization only contains public facing code. Once you’re ready, select Create Repository.\nThis should create the repository (ie folder) in your selected location on the Windows Explorer. If you need help finding the exact location on your computer, go to Github Desktop, select Repository in the top left and then Show in File Explorer.\nClick Publish Repo in the top right of Github Desktop to send the repo to Github.com\nInside the Git repo (ie folder) we suggest the following folder structure:\n\n README.md\n scripts/\n    somescript.R\n    someotherscript.R\nWhere the scripts folder contains all code for the project (feel free to create subfolders as you see fit).\n\nMake some changes to your project, like updating the README, or adding scripts. Then commit the changes on Github Desktop and push the changes.\nEach member of your project team will need to now clone the repo into a local path on their respective virtual machines (Urban Users PGP or Win 10 Secure). Again, do NOT clone the git repo into the mapped Y drive."
  },
  {
    "objectID": "urbngit/confidential-data-and-git.html#write-scripts-and-commit-to-gitgithub",
    "href": "urbngit/confidential-data-and-git.html#write-scripts-and-commit-to-gitgithub",
    "title": "Reproducibility at Urban",
    "section": "3) Write scripts and commit to Git/Github",
    "text": "3) Write scripts and commit to Git/Github\nNow you can write scripts to do cleaning/analysis as you normally would. The only caveat is that all data readin/write out will have to be to the mapped Y Drive path. Below is an example R script that shows how to do this. Note that these filepaths will only work when the scripts are run from a virtual machine that has urban network access to the Y Drive (ie the 2 virtual machines specified above).\n\nlibrary(tidyverse)\n\n# --- Read in Data ---\n\n## We recommend using the full filepath which starts with\n## `//ares/UI_Projects2/CENTER` as this will never change. Note you will need to\n## replace CENTER and projectfolder with your respective values\nraw_data <- read_csv(\"//ares/UI_Projects2/CENTER/projectfolder/data/raw-data/ex.csv\")\n\n## Also acceptable filepath which uses \"Y:\" drive mapping built into virtual\n## desktops. This could change in the future though\nraw_data <- read_csv(\"Y:/CENTER/projectfolder/data/raw-data/ex.csv\")\n\n\n# --- Write out Data ---\nraw_data %>%\n  write_csv(\"//ares/UI_Projects2/CENTER/projectfolder/data/intermediate-data/ex-cleaned.csv\")"
  },
  {
    "objectID": "git-installation/git-installation.html",
    "href": "git-installation/git-installation.html",
    "title": "Git Installation",
    "section": "",
    "text": "Git is a distributed version-control system for tracking changes in code. Git is free, open-source software and can be used locally without an internet connection. It’s like a turbo-charged version of track changes for code.\nGitHub, which is owned by Microsoft, is an online hosting service for version control using Git. It also contains useful tools for collaboration and project management. It’s like a turbo-charged version of Box for sharing repositories created using Git.\nAt first, it’s easy to mix up Git and GitHub. Just try to remember that they are separate tools that complement each other well.\nThe objective is to create local repositories that track code, and sometimes data, and then push those repositories to GitHub for back-up and collaboration. When someone else edits the code, they can push the changes to a repo"
  },
  {
    "objectID": "git-installation/git-installation.html#installation-and-registration",
    "href": "git-installation/git-installation.html#installation-and-registration",
    "title": "Git Installation",
    "section": "Installation and registration",
    "text": "Installation and registration\n\ngit installation for Windows\nInstall Git for Windows. Keep all default selections and be sure to install Git Bash. Git Bash is a command line for Windows that is useful for using Git. After installation, you should be able to right click and select Git Bash Here.\n\n\ngit installation for Mac OSX\nInstall Git for Mac OSX. Mac already has the terminal. Open the terminal and type git. If everything is properly installed, a list of possible command will show up."
  },
  {
    "objectID": "git-installation/git-installation.html#github-account",
    "href": "git-installation/git-installation.html#github-account",
    "title": "Git Installation",
    "section": "GitHub account",
    "text": "GitHub account\nCreate a GitHub account. There is no need to associate you account with Georgetown or a Georgetown email address. Many people want to GitHub for personal projects too.\n\nConfigure Git and GitHub\nThe following steps link your local Git to Github.\nIn any directory on your computer, right click and select Git Bash Here on Windows or open Terminal on Mac.\nSubmit the following with your GitHub username in quotes:\ngit config --global user.name \"your github username\"\nThen, submit the following to ensure that your GitHub username is associated with you computer:\ngit config --global user.name\nSubmit the following with the email associated with your GitHub account in quotes:\ngit config --global user.email \"email@example.com\"\nThen, submit the following to ensure that your GitHub email is associated with you computer:\ngit config --global user.email"
  },
  {
    "objectID": "git-installation/git-installation.html#more-resources",
    "href": "git-installation/git-installation.html#more-resources",
    "title": "Git Installation",
    "section": "More resources",
    "text": "More resources\n\nGit Cheat Sheet\nHappy Git and GitHub for the UserR\nGit Pocket Guide\nGetting Git Right\nGit Learning Lab"
  }
]
[
  {
    "objectID": "git-workflow.html",
    "href": "git-workflow.html",
    "title": "Git and Github Workflow",
    "section": "",
    "text": "This guide is intended to help Urban Institute employees get started with Git and GitHub. This guide assumes that you have already gone through the steps in the Access and Installation Guide.\nWe know that learning these tools can be a challenge, but we’re here for you! Drop a message in the #github Slack channel if you run into issues, and we will be happy to help out."
  },
  {
    "objectID": "git-workflow.html#using-the-command-line",
    "href": "git-workflow.html#using-the-command-line",
    "title": "Git and Github Workflow",
    "section": "1 Using the command line",
    "text": "1 Using the command line\nThis guide shows how to use Git from the command line, which may look scary but we promise will be useful to learn! There are other tools to interact with Git using a visual interface (like Github Desktop, or RStudio’s built in Git integration). These tools may be helpful, but we recommend starting by reading this guide and understanding how Git works. Under the hood, all those visual interfaces just use the command line.\nTo run Git commands from the command line on a Windows computer, right click within any directory (i.e. folder) on your computer, and select Git Bash Here. Alternatively, if you already use an IDE like RStudio or VS Code, you can use the terminal within these IDEs directly to run commands. You can also read more about the command line in this tutorial.\n&lt;run_this_command&gt; \n&lt;&gt; are used to indicate blanks that need to be filled in. Don’t actually submit &lt;&gt;. Instead, replace them with the desired text."
  },
  {
    "objectID": "git-workflow.html#basic-workflow",
    "href": "git-workflow.html#basic-workflow",
    "title": "Git and Github Workflow",
    "section": "2 Basic workflow",
    "text": "2 Basic workflow\n\n2.1 The big picture\nBefore diving into syntax, keep in mind the big picture:\n\nCreate a repository for a project.\nTell Git which files to track.\nTake a snapshot of tracked files and add a commit message.\nSend those snapshots to a shared folder so others can access them.\nRepeat, repeat, repeat.\n\n\n\n\n\n\n\n\n2.2 Creating a new repository\nThis only needs to happen once per repository!\n\nOption 1Option 2\n\n\nUse this option if you do not already have a project folder on your computer and are starting from scratch.\n\nUnder UI-Research on GitHub, click the green button titled New Repository (top right corner). Give the repository a name, and click Create Repository.\nOn GitHub, navigate to the repo that you just created and click the green button titled Code (top right corner). Copy the HTTPS remote URL. It will look like https://github.com/UI-Research/&lt;name_of_your_repo&gt;.git.\nNavigate to the directory where you want to keep the repo on your computer. Using the URL that you copied in the last step, clone the repository:\n\n\ngit clone &lt;remote_url_for_your_repo&gt;\n\n\nUse this option if you already have a project folder on your computer and want to turn that folder into a GitHub repository.\n\nUnder UI-Research on GitHub, click the green button titled New Repository (top right corner). Give the repository the same name as your directory, and click Create Repository.\nOn GitHub, navigate to the repo that you just created and click the green button titled Code (top right corner). Copy the HTTPS remote URL. It will look like https://github.com/UI-Research/&lt;name_of_your_repo&gt;.git.\nNavigate to the root of your project folder and initialize a local repository:\n\n\ngit init\n\nSync the URL for the remote repository that you copied in Step 2:\n\n\ngit remote add origin &lt;remote_url_for_your_repo&gt;\n\n\n\n\n\n2.3 Cloning an existing repository\nThis only needs to happen once per repository per computer!\nIf you want to clone a repository that already exists on GitHub to your computer:\n\nOn GitHub, navigate to the repo, and click the green button titled Code (top right corner). Copy the HTTPS remote URL. It will look like https://github.com/UI-Research/&lt;name_of_your_repo&gt;.git.\nNavigate to the directory where you want to keep the repo on your computer. Using the URL that you copied in the last step, clone the repository:\n\n\ngit clone &lt;remote_url_for_your_repo&gt;\n\n\n\n\n\n\n\n2.4 Adding collaborators to a repository\nTo share the repository with others, navigate to the GitHub page for the repo. Then, click Settings (along the top) and Collaborators and Teams (along the left side panel). Click the relevant buttons to add people (individual users) or teams (groups of users).\nTeams are useful if you have a set of users who will all need access to multiple repositories. Creating a team saves you from having to add each user individually for each new repo. Urban has 50+ teams on GitHub for specific projects (e.g. Education Data Team for folks across TECH, COMMS, and EDP who work on the Education Data Portal) or teams or centers within Urban (e.g. Data Science or HFPC).\n\n\n2.5 Basic commands and workflow\nThe most common Git commands you will use include git add, git commit, and git push. These tell Git which files to track, when to take snapshots of those files, and when to send those snapshots to GitHub for others to see.\ngit add adds a file to Git’s staging area. It tells Git, “Hey, look at this file.”\ngit add &lt;file_name&gt;\ngit commit commits changes made to added files to the repository. It says, “Hey, take a snapshot of the files I’ve added.”\ngit commit -m \"&lt;message&gt;\" \ngit status prints out important information about your repo. Use it before and after most commands to understand how files have changed in your repo.\ngit status \ngit push pushes your local commits to the remote repository on GitHub. It says, “hey, push all my snapshots to a shared folder so that other people can see them.” The command below will push to the default main branch of your repo. Note that for repositories created before August 2021, the default branch was called master, instead of main.\ngit push origin main\nBefore running the git push command, your code and commits could only be accessed on your local computer."
  },
  {
    "objectID": "git-workflow.html#collaborative-workflow",
    "href": "git-workflow.html#collaborative-workflow",
    "title": "Git and Github Workflow",
    "section": "3 Collaborative workflow",
    "text": "3 Collaborative workflow\nThe main benefit of version control is making sure you and your collaborators are all using the latest and greatest version of your code. When working individually, this will just be your local version. When working with others, you should pull down the latest changes that anyone has pushed remotely before making further updates.\ngit pull copies the latest changes that anyone has pushed remotely to your local repository. It says, “Hey, replace my local version with the current version on GitHub.” The command below will pull the latest version on the main branch.\ngit pull origin main\n\n\n\n\n\n\n3.1 Branches\nSo far in this guide, we’ve been working off a single main branch. By using multiple branches, you and your collaborators can update existing code or add new code without the fear of overwriting each others’ files. Branches let you say “Hey, I’m going to leave the main version of the code alone while I try some things out over here.”\n\n\n\n\n\ngit checkout switches your local version to different branch. The -b flag in the command below tells Git to first create a new branch and then switch to it. When you first create a new branch, it will be identical to the local version of the branch that you switched from (typically the main branch).\ngit checkout -b &lt;name_of_new_branch&gt; \ngit branch will tell you what branch you are currently on. It’s always a good idea to run git branch before pushing.\ngit branch\ngit push sends your local commits to the remote repository, as noted earlier. To push to a specific branch, specify the branch name in the command. If you don’t explicitly specify a branch, Git will push to whichever branch you are on.\ngit push origin &lt;name_of_new_branch&gt; \n\n\n3.2 Pull requests\nWhen you’re ready to share the updates on your branch with others, open a pull request. This says, “Hey, I’d like to merge the work on my branch into the main (or some other) branch.” Pull requests makes it easy for others to see the changes you’ve made and provide feedback. They also help organize multiple related commits into a single update.\nThe most common way to open, review, and merge a pull request is through GitHub, rather than from the command line. Different teams develop their own standards for branching and pull requests, but here’s a common workflow:\n\nFrom your repo, click Pull requests (along the top) and then click the green New pull request button.\nSelect the branch with your work. By default, GitHub will create a pull request into the main branch.\nReview the files that have changed to ensure you don’t accidentally merge files you don’t intend to into the main branch.\nClick Create pull request. Write a summary of the updates included in the pull request and why you made those updates. You can also add Reviewers (along the right panel) to notify others that you would like them to look at your changes.\nTo make changes to the code included in a pull request if (e.g. if a reviewer requests updates), simply push to the same branch. The pull request will automatically be updated to reflect these changes.\nOnce approved, merge the pull request into the main branch by clicking the green Merge or Rebase and merge button.\nOnce your branch has been merged, delete it.\n\n\n\n\n\n\nAfter merging the pull request, you should return to the main branch and sync your local directory with the merged changes:\ngit checkout switches your local version to a different branch.\ngit checkout main\ngit pull copies the latest changes from the pull request that you just merged remotely to your local repository. If you don’t explicitly specify a branch when running the git pull command, Git will pull from the branch you are currently on.\ngit pull"
  },
  {
    "objectID": "git-workflow.html#summary-of-commands",
    "href": "git-workflow.html#summary-of-commands",
    "title": "Git and Github Workflow",
    "section": "4 Summary of commands",
    "text": "4 Summary of commands\nThe table below summarizes the commands that we’ve discussed in this guide. There are also tons of Git cheat sheets available online (e.g. from GitHub Education, from GitLab, or from Atlassian).\n\n\n\n\n\n\n\nCommand\nWhat you’re telling Git\n\n\n\n\ngit clone &lt;remote_url_for_your_repo&gt;\n“Hey, copy this remote project to my local computer”\n\n\ngit add &lt;file_name&gt;\n“Hey, look at this file”\n\n\ngit commit -m \"&lt;message&gt;\"\n“Hey, take a snapshot of the files I’ve added”\n\n\ngit status\n“Hey, tell me about what you’re looking at”\n\n\ngit push\n“Hey, send my snapshots to a shared folder so other people can see them”\n\n\ngit pull\n“Hey, replace my local version with the remote version of the shared folder”\n\n\ngit checkout -b &lt;name_of_new_branch&gt;\n“Hey, create a new branch and switch to it”\n\n\ngit checkout &lt;name_of_existing_branch&gt;\n“Hey, switch to a different branch”\n\n\ngit branch\n“Hey, tell me what branch I’m on”"
  },
  {
    "objectID": "git-workflow.html#parting-advice",
    "href": "git-workflow.html#parting-advice",
    "title": "Git and Github Workflow",
    "section": "5 Parting advice",
    "text": "5 Parting advice\nPhew, that was a lot! If you’re new to Git and GitHub, don’t get bogged down in the details. Start by adding, committing, and pushing files to GitHub on the main branch. Once you’re comfortable with those steps, find a colleague to work with you on the main branch and start pulling their updates. Before long, you’ll have that workflow down and will be ready to start using multiple branches and opening pull requests.\nThis guide is meant to be an introduction. Git and GitHub have hundreds of useful commands and features not discussed here. Different folks and teams also have different opinions on workflows and best practices for using these tools. Once you have a grasp of the basics, we encourage you to start exploring to find a workflow that works for you.\nYou will inevitably run into errors along the way, but learning how to resolve those will make you a better researcher, programmer, and problem solver. Don’t be afraid to ask for help – the #github Slack channel is a great place to start!\nLastly, remember that if things ever go horribly wrong, you can use the inelegant (but effective) “burn it all down” technique to return to a happy state: save your work elsewhere, delete the project folder, and clone a fresh copy of the repository."
  },
  {
    "objectID": "virtual-environments.html",
    "href": "virtual-environments.html",
    "title": "Virtual Environments",
    "section": "",
    "text": "This guide is intended to help R and Python users at the Urban Institute start using virtual environments. This guide assumes familiarity with Git and GitHub (see this guide if you are not familiar with these tools) and is focused on helping folks start using virtual environments without having to meaningfully modify their existing workflows."
  },
  {
    "objectID": "virtual-environments.html#why-should-i-use-a-virtual-environment",
    "href": "virtual-environments.html#why-should-i-use-a-virtual-environment",
    "title": "Virtual Environments",
    "section": "1 Why should I use a virtual environment?",
    "text": "1 Why should I use a virtual environment?\nVirtual environments promote reproducibility by letting you let you specify project-specific versions of packages. They accomplish this by making it easy to take a snapshot of the version of packages used in a project and restore that snapshot on other computers. They also make it easy to switch between snapshots on a single computer as you switch between projects.\nTo make this more concrete, here’s a few situations when setting up a virtual environment can save you several hours (or even days!) of frustration:\n\nYou published an analysis based on 2021 data. A year later, you want to update the analysis with 2022 data, but your code no longer works because a function in a package was updated.\nYour coworker is running into errors running your code because of differences in package versions between your computers.\nYou need to use Python 2.7 for a legacy project, while using Python 3.7 for all other projects.\nYou want to use a new library that has known compatibility issues with Python 3.8 on Windows computers, so you want to use Python 3.7 for just one specific project.\nYou got a new computer and don’t want to spend hours remembering which R packages to install through endless Error in library(&lt;&gt;): there is no package called '&lt;&gt;' errors.\nYour code takes a long time to run locally, so you want to leverage powerful virtual computers in the cloud - or scale to use tens, hundreds, or thousands of computers simultaneously - but you first need to install the relevant packages on the virtual machine(s).\n\nImportantly, virtual environments are just one piece of reproducible research workflows - they are NOT replacements for other important components of reproducibility like version control, directory management, or data provenance."
  },
  {
    "objectID": "virtual-environments.html#when-should-i-use-a-virtual-environment",
    "href": "virtual-environments.html#when-should-i-use-a-virtual-environment",
    "title": "Virtual Environments",
    "section": "2 When should I use a virtual environment?",
    "text": "2 When should I use a virtual environment?\nIdeally, always. You’ll be more likely to regret NOT setting up a virtual environment for a project down the line than to regret spending a few minutes doing so for a project that didn’t necessarily require one. Getting into the habit of using virtual environments for smaller projects will also help you develop confidence when using them for larger projects with more collaborators and complex dependencies.\nWhile the best time to set up a virtual environment for a project is at the very beginning (right after initializing your GitHub repository), the second best time is right now - whether you’re halfway through writing your code, ready to publish your results, or have already published your analysis."
  },
  {
    "objectID": "virtual-environments.html#which-environment-manager-should-i-use",
    "href": "virtual-environments.html#which-environment-manager-should-i-use",
    "title": "Virtual Environments",
    "section": "3 Which environment manager should I use?",
    "text": "3 Which environment manager should I use?\nFor R projects, we recommend using renv. For Python projects, we recommend using conda. These are by no means the only environment managers for R and Python, but we’ve found these to be the most reliable and user-friendly for the majority of use cases at Urban.\n\n\n\n\n\n\nAlternatives for R\n\n\n\n\n\nWithin the R community, renv, developed and maintained by RStudio, is the de facto virtual environment manager. Older resources might reference packrat, which has been soft-deprecated and is now superseded by renv. According to the developers of renv,\n\nThe goal is for renv to be a robust, stable replacement for the Packrat package, with fewer surprises and better default behaviors. If you’re using R alongside Python, it may make sense to use conda as your environment manager. Documentation for using R with the Anaconda distribution and conda environment manager is available here. Alternatively, you can use Python with renv, as documented here.\n\n\n\n\n\n\n\n\n\n\nAlternatives for Python\n\n\n\n\n\nThere is a plethora of virtual environment managers in Python, with a few of the most common being virtualenv, pipenv, poetry, and conda.\nFor data science and research use cases, conda is a popular option for several reasons. First, conda is both an environment manager and a package manager. As a result, conda helps install packages and manage dependencies, whereas other tools rely on pip for package management. Unlike other managers, conda also has native support for programming languages beyond Python (including R). Lastly, conda is extensible, letting you install packages from pip, for example, and offering Miniconda as a lighter-weight alternative or Mambda as an even faster “drop-in replacement” for conda.\nIf you’re using R and Python, conda or renv are good options given their emphasis on interoperability. Documentation for using R with conda is available here, and documentation for using Python with renv is available here."
  },
  {
    "objectID": "virtual-environments.html#how-do-i-set-up-a-virtual-environment",
    "href": "virtual-environments.html#how-do-i-set-up-a-virtual-environment",
    "title": "Virtual Environments",
    "section": "4 How do I set up a virtual environment?",
    "text": "4 How do I set up a virtual environment?\n\n4.1 The big idea\n\nOverallRPython\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.2 Workflow and commands\n\nRPython\n\n\nTo set up a virtual environment for an R project, we recommend using renv. To install renv, use the standard syntax to install R packages from CRAN: install.packages(\"renv\").\n\n\n\n\n\n\nWhere do I run these commands?\n\n\n\nAll commands below should be run in the RStudio console within your project’s directory.\n\n\n\nInitialize a new project-specific environment:\nrenv::init()\nInstall packages using your usual workflow or renv::install(), which works with other repositories like GitHub in addition to CRAN:\ninstall.packages(\"ggplot2\")      # install from CRAN\nrenv::install(\"tidyverse/dplyr\") # install from GitHub\nNote that renv can install packages from a variety of sources including CRAN, GitHub, and Bioconductor.\nSave a snapshot of the environment to a file called renv.lock:\nrenv::snapshot()\nShare the snapshot of the environment by sending three files to GitHub: renv.lock, .Rprofile, and renv/activate.R.\nNote that running the renv::init() command in the first step automatically updates your .gitignore file (if relevant) to tell Git which renv files to track.\nRestore the snapshot of the environment on another computer:\nrenv::restore()\nRepeat the process. As you and your collaborators install, update, and remove packages, repeat steps 3-5 to save and load the state of your project to the renv.lock file across computers.\n\n\n\nTo set up a virtual environment for a Python project, we recommend using conda, which is built into the Anaconda distribution through Anaconda or Miniconda. If you haven’t already installed Anaconda, see this guide from a previous Python Users Group session. You can verify that conda is installed and running on your computer with conda --version. If you get an error, see the Anaconda troubleshooting guide.\n\n\n\n\n\n\nWhere do I run these commands?\n\n\n\nAll commands below should be run from the Anaconda Prompt or a terminal window (e.g. within RStudio or VS Code) from the root of your project’s directory.\n\n\n\nInitialize a new environment (optionally specifying a version of Python and/or a list of packages) using one of the options below. You should replace my_env with a descriptive name specific to your project.\nconda create --name my_env                           # create empty environment  \nconda create --name my_env python==3.7               # create environment with specific Python version \nconda create --name my_env python==3.7 pandas numpy  # create environment with packages installed \nIt’s best practice to specify packages when initializing the environment to let conda help manage dependencies most effectively.\nActivate the environment, again replacing my_env with the name of your environment:\nconda activate my_env\nInstall packages using your usual workflow (optionally specifying the package version) for any packages that you did not include when initializing the environment in the first step:\nconda install pandas         # install default version of pandas \nconda install pandas=0.24.1  # install specific version of pandas \nIt’s best practice to specify the version number associated with a package to ensure that changes in packages over time don’t affect the reproducibility of your code.\nSave a snapshot of the environment to a file called environment.yml.\nconda env export --from-history &gt; environment.yml\nThe from-history flag is necessary to make your environment file work across platforms.\nAlternatively, you can manually create the environment.yml file in the root of your project directory, where it would follow this structure:\nname: my_env\ndependencies:\n  - python=3.7\n  - pandas=0.24\n  - numpy=1.21\nIf you installed packages using pip, the environment.yml file would follow this structure:\nname: my_env\ndependencies:\n  - python=3.7\n  - pandas=0.24\n  - numpy=1.21\n  - pip=19.1\n  - pip:\n    - awscli==1.16\n    - kaggle==1.5\nNote that packages installed using pip use == to specify the version number, while packages installed from conda use =.\nShare the snapshot by sending the environment.yml file to GitHub.\nRestore and activate the snapshot of the environment on another computer:\nconda env create      \nconda activate my_env\nThe conda env create syntax assumes you have a file called environment.yml in your working directory. While you could give this file a different name, we recommend sticking with the convention of naming the file environment.yml and placing it in the root of your project’s directory.\nRepeat the process. As you and your collaborators install, update, and remove packages, repeat steps 4-6 to save and load the state of your project to the environment.yml file across computers."
  },
  {
    "objectID": "virtual-environments.html#additional-resources",
    "href": "virtual-environments.html#additional-resources",
    "title": "Virtual Environments",
    "section": "5 Additional resources",
    "text": "5 Additional resources\n\nRPython\n\n\nThe 10-minute talk from rstudio::conf(2022) called You should be using renv from E. David Aja is a great overview of the motivation for using the tool. We also recommend the official Introduction to renv and Collaborating with renv vignettes.\n\n\nWe recommend keeping the official conda cheat sheet handy.\nIn addition to the commands included above, a few other commonly used conda commands include:\n\nconda deactivate deactivates the current environment\nconda list lists all packages in the current environment\nconda env list lists all environments (with the current active environment asterisked)\nconda env remove -n my_env deletes the my_env environment\n\nThe official documentation and this guide from the Carpentries are also helpful resources."
  },
  {
    "objectID": "virtual-environments.html#getting-help",
    "href": "virtual-environments.html#getting-help",
    "title": "Virtual Environments",
    "section": "6 Getting help",
    "text": "6 Getting help\nAdding a new tool to your workflow can be hard, but we’re here to help! Feel free to email Erika Tyagi (etyagi@urban.org) or drop a message in the #reproducible-research Slack channel with any questions or if you run into issues."
  },
  {
    "objectID": "virtual-environments.html#obligatory-xkcd-comic",
    "href": "virtual-environments.html#obligatory-xkcd-comic",
    "title": "Virtual Environments",
    "section": "7 Obligatory xkcd comic",
    "text": "7 Obligatory xkcd comic\nI couldn’t pick just one, so here’s three:\n\nDependencyPython EnvironmentWorkflow"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reproducibility at Urban",
    "section": "",
    "text": "This website contains resources for embracing reproducible research at the Urban Institute. Click the links above to get started learning about reproducible research!"
  },
  {
    "objectID": "index.html#contact",
    "href": "index.html#contact",
    "title": "Reproducibility at Urban",
    "section": "Contact",
    "text": "Contact\nPlease don’t hesitate to contact Maddie Pickens, Erika Tyagi, or Aaron R. Williams with any thoughts or questions about reproducible research at the Urban Institute."
  },
  {
    "objectID": "git-installation.html",
    "href": "git-installation.html",
    "title": "Git and GitHub Access and Installation",
    "section": "",
    "text": "This guide is intended to help Urban Institute employees get started accessing and installing Git and GitHub. You should generally only have to complete the steps in this guide once during your time at Urban.\nWe know that learning these tools can be a challenge, but we’re here for you! Drop a message in the #github Slack channel if you run into issues, and we will be happy to help out."
  },
  {
    "objectID": "git-installation.html#background",
    "href": "git-installation.html#background",
    "title": "Git and GitHub Access and Installation",
    "section": "1 Background",
    "text": "1 Background\nVersion control is a system for managing and recording changes to files over time. Version control can:\n\nLimit the chance of making a mistake\nMaximize the chance of catching a mistake when it happens\nCreate a permanent record of changes to code\nEasily undo mistakes by switching between iterations of code\nAllow multiple paths of development while protecting working versions of code\nEncourage communication between collaborators\nBe used for external communication\n\nGit is a distributed version-control system for tracking changes in code. Git is free, open-source software and can be used locally without an internet connection. It’s like a turbo-charged version of track changes for code.\nGitHub is an online hosting service for version control using Git. It also contains useful tools for collaboration and project management. It’s like a turbo-charged version of Box for sharing repositories created using Git.\nThe objective of using Git and GitHub is to create local repositories that track code, and sometimes data, and then push those repositories to GitHub for back-up and collaboration. When someone else edits the code, they can push their changes to that repository."
  },
  {
    "objectID": "git-installation.html#installation-and-registration",
    "href": "git-installation.html#installation-and-registration",
    "title": "Git and GitHub Access and Installation",
    "section": "2 Installation and registration",
    "text": "2 Installation and registration\n\n2.1 git installation for Windows\nInstall Git for Windows. Keep all default selections and be sure to install Git Bash. Git Bash is a command line for Windows that is useful for using Git. After installation, you should be able to right click and select Git Bash Here.\n\n\n2.2 git installation for Mac OS\nInstall Git for Mac OS. Mac already has the terminal. Open the terminal and type git. If everything is properly installed, a list of possible command will show up."
  },
  {
    "objectID": "git-installation.html#github-account",
    "href": "git-installation.html#github-account",
    "title": "Git and GitHub Access and Installation",
    "section": "3 GitHub account",
    "text": "3 GitHub account\nCreate a GitHub account. There is no need to associate your account with the Urban Institute or an Urban Institute email address. Many people want to use GitHub for personal projects too.\nAfter creating an account, fill out Urban’s GitHub intake form to join Urban’s primary GitHub organization, UI-Research. Note that Urban has another GitHub organization, UrbanInstitute, that is primarily used for public-facing repositories."
  },
  {
    "objectID": "git-installation.html#configure-git-and-github",
    "href": "git-installation.html#configure-git-and-github",
    "title": "Git and GitHub Access and Installation",
    "section": "4 Configure Git and GitHub",
    "text": "4 Configure Git and GitHub\nLink your local Git to GitHub by submitting the following with your GitHub username in quotes:\ngit config --global user.name \"&lt;your_github_username&gt;\"\nYou should also submit the email address linked to your GitHub account:\ngit config --global user.email \"&lt;your_email_address&gt;\""
  },
  {
    "objectID": "git-installation.html#authentication-and-tokens",
    "href": "git-installation.html#authentication-and-tokens",
    "title": "Git and GitHub Access and Installation",
    "section": "5 Authentication and tokens",
    "text": "5 Authentication and tokens\nYou will need to create a personal access token (PAT) to replace your password and provide enhanced security. Since 2021, GitHub has required PATs to perform Git operations. To create a PAT:\n\nLog into your GitHub account. Navigate to the drop-down menu in the top right corner with your profile picture. Select Settings near the bottom of this drop-down.\nFrom your account settings, navigate to Developer Settings, at the bottom of the menu on the left.\nFrom the developer settings, navigate to Personal Access Tokens in the menu on the left.\nClick Generate new token (classic). You may be prompted to re-enter your GitHub password.\nAdd a note to label the token. This is useful if you intend to generate multiple tokens for different uses. Then, set a time limit for the token – you can set this to never expire. Finally, select the scope of permissions you would like to give the token - you can select all all options. Then click Generate token.\nThe generated token will appear. Make sure to copy and safely store the token when it appears, as you will not be able to view it again. Note that if you lose your token, you can always generate a new one. Use this in place of your GitHub password when prompted by Git (or when using the GitHub API).\n\nThe first time you attempt to clone (copy to your computer) a repository that is private on GitHub, Git will prompt you for your credentials. Your username is just your GitHub username. Your password should be the PAT that you created."
  },
  {
    "objectID": "git-faqs.html",
    "href": "git-faqs.html",
    "title": "Git and Github FAQs",
    "section": "",
    "text": "Git and GitHub seem a little scary. How do I get started?\nStart by using these tools for solo work. It is the lowest stakes way to develop skills that will be valuable for collaboration.\nWhere can I go for help if I get stuck?\nRunning into errors is an inevitable part of working with Git and GitHub, but we’re here to help! Drop a message in the #github Slack channel when you have issues, or email Aaron Williams (awilliams@urban.org) or Erika Tyagi (etyagi@urban.org).\nCan I use Git and GitHub with projects that have confidential data stored on the Y Drive?\nYes! Read this guide for tips on how to do so.\nShould I use Git inside of Box? (i.e. turn a Box folder into a Git repository)\nNo – we strongly recommend keeping Box folders and GitHub repositories separate.\nWhat kinds of files should I track with Git?\nGenerally, you should only track code (i.e., scripts written in R, Stata, SAS, Python, etc.) with Git. You should not track large data files or binary files (i.e., Word, Excel files). There are occasions when tracking small data files with Git might make sense, but you should never store confidential data on GitHub (even in a private repository). We recommend getting familiar with .gitignore files, which can prevent you and your collaborators from accidentally pushing files to GitHub. GitHub provides hundreds of template .gitignore files for specific programming languages (e.g. R, Stata, or Python) or operating systems (e.g. Windows or MacOS) that can be useful as a starting point.\nHow do I add documentation to my repositories?\nUse README files to add context and documentation to your repos. These are Markdown files in the root of your directory named README.md that can help folks understand the structure and contents of your repo. Markdown Live Preview can be a useful tool to help with formatting.\nWhat permissions should I give my collaborators?\nIn general, you should follow the principle of least privilege, which means that you should give folks the minimum level of access they need, but no more than that. In most cases, this will be the Write role, but you should refer to GitHub’s guide describing the different roles and what they allow. If you need elevated permissions for a repository, post a message in the #github Slack channel.\nAre there other commands that can be helpful when using Git from the command line?\nDefinitely! Learning a few simple Bash commands can be helpful for navigating the command line. A few common commands include pwd (to print your current directory), cd (to change directories), and ls (to list the files in a directory). For an introduction to these, and other, commands, we recommend this guide from Friendly Django or this guide from Happy Git with R.\nWhere did the cute images in this guide come from?\nThose are GitHub’s mascot, the Octocat. You can read more about the history of Octocats here and check out the full set of Octocats that GitHub has created here."
  },
  {
    "objectID": "git-faqs.html#faqs",
    "href": "git-faqs.html#faqs",
    "title": "Git and Github FAQs",
    "section": "",
    "text": "Git and GitHub seem a little scary. How do I get started?\nStart by using these tools for solo work. It is the lowest stakes way to develop skills that will be valuable for collaboration.\nWhere can I go for help if I get stuck?\nRunning into errors is an inevitable part of working with Git and GitHub, but we’re here to help! Drop a message in the #github Slack channel when you have issues, or email Aaron Williams (awilliams@urban.org) or Erika Tyagi (etyagi@urban.org).\nCan I use Git and GitHub with projects that have confidential data stored on the Y Drive?\nYes! Read this guide for tips on how to do so.\nShould I use Git inside of Box? (i.e. turn a Box folder into a Git repository)\nNo – we strongly recommend keeping Box folders and GitHub repositories separate.\nWhat kinds of files should I track with Git?\nGenerally, you should only track code (i.e., scripts written in R, Stata, SAS, Python, etc.) with Git. You should not track large data files or binary files (i.e., Word, Excel files). There are occasions when tracking small data files with Git might make sense, but you should never store confidential data on GitHub (even in a private repository). We recommend getting familiar with .gitignore files, which can prevent you and your collaborators from accidentally pushing files to GitHub. GitHub provides hundreds of template .gitignore files for specific programming languages (e.g. R, Stata, or Python) or operating systems (e.g. Windows or MacOS) that can be useful as a starting point.\nHow do I add documentation to my repositories?\nUse README files to add context and documentation to your repos. These are Markdown files in the root of your directory named README.md that can help folks understand the structure and contents of your repo. Markdown Live Preview can be a useful tool to help with formatting.\nWhat permissions should I give my collaborators?\nIn general, you should follow the principle of least privilege, which means that you should give folks the minimum level of access they need, but no more than that. In most cases, this will be the Write role, but you should refer to GitHub’s guide describing the different roles and what they allow. If you need elevated permissions for a repository, post a message in the #github Slack channel.\nAre there other commands that can be helpful when using Git from the command line?\nDefinitely! Learning a few simple Bash commands can be helpful for navigating the command line. A few common commands include pwd (to print your current directory), cd (to change directories), and ls (to list the files in a directory). For an introduction to these, and other, commands, we recommend this guide from Friendly Django or this guide from Happy Git with R.\nWhere did the cute images in this guide come from?\nThose are GitHub’s mascot, the Octocat. You can read more about the history of Octocats here and check out the full set of Octocats that GitHub has created here."
  },
  {
    "objectID": "git-faqs.html#additional-resources",
    "href": "git-faqs.html#additional-resources",
    "title": "Git and Github FAQs",
    "section": "2 Additional Resources",
    "text": "2 Additional Resources\n\nGit Cheat Sheet\nHappy Git and GitHub for the UserR\nGit Pocket Guide\nGetting Git Right\nGit Learning Lab\nGit for Humans"
  },
  {
    "objectID": "git-y-drive.html",
    "href": "git-y-drive.html",
    "title": "Git and Github with Confidential Data",
    "section": "",
    "text": "So you’ve learned about the power of Git/Github and now want to use it in your projects. That’s great news! But if your project data is stored on the Y Drive (aka ares) for confidentiality reasons, you’ll have to jump through a few extra hoops. Below are instructions on how to set up a Github repo to play nicely with the Y drive."
  },
  {
    "objectID": "git-y-drive.html#the-big-picture",
    "href": "git-y-drive.html#the-big-picture",
    "title": "Git and Github with Confidential Data",
    "section": "1 The big picture",
    "text": "1 The big picture\n\nStore all data directly on the Y Drive\nStore all scripts in a Git repo\nCreate/clone the Git repo on either the Urban Users PGP or Win 10 Secure Virtual Machines local drive.\nKeep that git repo with the scripts completely separate from the Y Drive folder with the data\nWithin your scripts, always read in data using the direct Y Drive filepaths and write out intermediate/final data files using direct Y Drive filepaths.\n\nThis means your scripts will live in a separate place (usually the Documents folder of the virtual desktop) from your data (somewhere in the Y Drive) and only your scripts will be on Git/Github. So while changes to your scripts will be tracked with all the power of Github, your data will not.\nIf your project only has non-sensitive data files, it is best practice to put the data and scripts directly in the same git repo as that makes it easier to work with collaborators and quickly understand project structures. But if you work with confidential data, you can’t put your data in Git/Github for security reasons (and therefore won’t get the power of Git and file tracking for the data).\nNow that’s out of the way, how do you setup Git/Github with your confidential data?"
  },
  {
    "objectID": "git-y-drive.html#set-up-the-y-drive-folder-for-data",
    "href": "git-y-drive.html#set-up-the-y-drive-folder-for-data",
    "title": "Git and Github with Confidential Data",
    "section": "2 Set up the Y Drive folder (for data)",
    "text": "2 Set up the Y Drive folder (for data)\n\nReach out to Hadi Jeddy in TECH to get a Y drive folder created for your project and give the appropriate project staff access.\nSecurely move the project data files into the assigned Y drive folder. Inside the Y Drive folder we recommend the following folder structure:\n- projectfolder/\n    - data/\n        - raw-data/\n        - intermediate-data/\n        - final-data/\n\nThe data you move in to the Y drive should go into the data/raw-data folder and manipulated data can go into the other folders.\nNote that because the data files aren’t in the Git repo, it will be possible for members of your team to accidentally overwrite the intermediate/final data files in the Y Drive if multiple people run the same script and there is no way to restore changes.\nFor this reason, we suggest a) keeping the data files inside raw-data untouched and never programmatically writing to that folder and b) keeping a clear script copy of how you transform the files inside raw-data so that if needed you can easily regenerate intermediate and final data files."
  },
  {
    "objectID": "git-y-drive.html#set-up-the-git-repo-for-scripts",
    "href": "git-y-drive.html#set-up-the-git-repo-for-scripts",
    "title": "Git and Github with Confidential Data",
    "section": "3 Set up the git repo (for scripts)",
    "text": "3 Set up the git repo (for scripts)\n\nUse Virtual Desktop to open either Win10 Secure or PGP. Note Win10 Secure has SAS installed while PGP does not. PGP might be more powerful/have more memory if you have computationally expensive code.\nIf you’re on PGP, install Github desktop from this link: https://desktop.github.com/. Win 10 Secure should already have this.\nOpen up Github desktop and login to your Github account. If you don’t have one, you will need to signup here and them fill out this smartsheet form to be added to the Urban Institute organizations. Once someone adds you to the 2 Urban organizations, you will receive 2 emails asking if you want to join. You will have to click join in each of those emails to be succesfully added to our Github organizations.\nClick Add &gt; Create new repository. In the popup screen, enter an informative name for your repo and a project description. Use the example screenshot below for guidance. We recommend initializing the repo with a README (with background information/instructions for running your code) and selecting a gitignore (to ignore certain R/Sas/Stata temporary files). Very importantly, when selecting a local path to create your repository, make sure that the repo is created within the local drive of the virtual machine you are on, and NOT the mapped Y: drive. By default, Github Desktop should try to create the repo in \\\\Ares\\CTX_RedirectedFolders$\\username\\My Documents\\GitHub. While that may look weird, that is an acceptable filepath and will put the repo in the My Documents\\Github folder of the virtual desktop. Also make sure to create the repostiory in the private UI-Research organization. The Urban Institute organization only contains public facing code. Once you’re ready, select Create Repository.\nThis should create the repository (i.e., folder) in your selected location on the Windows Explorer. If you need help finding the exact location on your computer, go to Github Desktop, select Repository in the top left and then Show in File Explorer.\nClick Publish Repo in the top right of Github Desktop to send the repo to Github.com\nInside the Git repo (i.e., folder) we suggest the following folder structure:\nREADME.md\nscripts/\n    somescript.R\n    someotherscript.R\n\nWhere the scripts folder contains all code for the project (feel free to create subfolders as you see fit).\n\nMake some changes to your project, like updating the README, or adding scripts. Then commit the changes on Github Desktop and push the changes.\nEach member of your project team will need to now clone the repo into a local path on their respective virtual machines (Urban Users PGP or Win 10 Secure). Again, do NOT clone the git repo into the mapped Y drive."
  },
  {
    "objectID": "git-y-drive.html#write-scripts-and-commit-to-gitgithub",
    "href": "git-y-drive.html#write-scripts-and-commit-to-gitgithub",
    "title": "Git and Github with Confidential Data",
    "section": "4 Write scripts and commit to Git/Github",
    "text": "4 Write scripts and commit to Git/Github\nNow you can write scripts to do cleaning/analysis as you normally would. The only caveat is that all data you read in/write out will have to be to the mapped Y Drive path. Below is an example R script that shows how to do this. Note that these filepaths will only work when the scripts are run from a virtual machine that has Urban network access to the Y Drive (i.e., the 2 virtual machines specified above).\n\nlibrary(tidyverse)\n\n# --- Read in Data ---\n\n## We recommend using the full filepath which starts with\n## `//ares/UI_Projects2/CENTER` as this will never change. Note you will need to\n## replace CENTER and projectfolder with your respective values.\nraw_data &lt;- read_csv(\"//ares/UI_Projects2/CENTER/projectfolder/data/raw-data/ex.csv\")\n\n## Another acceptable filepath uses the \"Y:\" drive mapping built into \n## virtual desktops. This could change in the future.\nraw_data &lt;- read_csv(\"Y:/CENTER/projectfolder/data/raw-data/ex.csv\")\n\n\n# --- Write out Data ---\nraw_data %&gt;%\n  write_csv(\"//ares/UI_Projects2/CENTER/projectfolder/data/intermediate-data/ex-cleaned.csv\")"
  }
]